<?php
/**
 * TimelineAdditionalParams
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  Foxdeli\ApiPhpSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Foxdeli Tracking service API
 *
 * Foxdeli API implements JWT tokens as its chosen method of authentication, requiring that these tokens be included in the HTTP header X-API-Key for each request.
 *
 * The version of the OpenAPI document: 14.70.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Foxdeli\ApiPhpSdk\Model;

use \ArrayAccess;
use \Foxdeli\ApiPhpSdk\ObjectSerializer;

/**
 * TimelineAdditionalParams Class Doc Comment
 *
 * @category Class
 * @description Additional parameters related to timeline record
 * @package  Foxdeli\ApiPhpSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class TimelineAdditionalParams implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TimelineAdditionalParams';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'shipping_email' => '\Foxdeli\ApiPhpSdk\Model\TimelineShippingEmail',
        'parcel_state' => '\Foxdeli\ApiPhpSdk\Model\TimelineParcelState',
        'parcel_state_group' => 'string',
        'parcel_trace' => '\Foxdeli\ApiPhpSdk\Model\TimelineParcelTrace',
        'issue_tracking' => '\Foxdeli\ApiPhpSdk\Model\TimelineIssueTracking'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'shipping_email' => null,
        'parcel_state' => null,
        'parcel_state_group' => null,
        'parcel_trace' => null,
        'issue_tracking' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return string[]
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return string[]
     * @phpstan-return array<string, string|null>
     * @psalm-return array<string, string|null>
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'shipping_email' => 'shippingEmail',
        'parcel_state' => 'parcelState',
        'parcel_state_group' => 'parcelStateGroup',
        'parcel_trace' => 'parcelTrace',
        'issue_tracking' => 'issueTracking'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'shipping_email' => 'setShippingEmail',
        'parcel_state' => 'setParcelState',
        'parcel_state_group' => 'setParcelStateGroup',
        'parcel_trace' => 'setParcelTrace',
        'issue_tracking' => 'setIssueTracking'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'shipping_email' => 'getShippingEmail',
        'parcel_state' => 'getParcelState',
        'parcel_state_group' => 'getParcelStateGroup',
        'parcel_trace' => 'getParcelTrace',
        'issue_tracking' => 'getIssueTracking'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return string[]
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return string[]
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return string[]
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['shipping_email'] = $data['shipping_email'] ?? null;
        $this->container['parcel_state'] = $data['parcel_state'] ?? null;
        $this->container['parcel_state_group'] = $data['parcel_state_group'] ?? null;
        $this->container['parcel_trace'] = $data['parcel_trace'] ?? null;
        $this->container['issue_tracking'] = $data['issue_tracking'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets shipping_email
     *
     * @return \Foxdeli\ApiPhpSdk\Model\TimelineShippingEmail|null
     */
    public function getShippingEmail()
    {
        return $this->container['shipping_email'];
    }

    /**
     * Sets shipping_email
     *
     * @param \Foxdeli\ApiPhpSdk\Model\TimelineShippingEmail|null $shipping_email shipping_email
     *
     * @return self
     */
    public function setShippingEmail($shipping_email) : self
    {
        $this->container['shipping_email'] = $shipping_email;

        return $this;
    }

    /**
     * Gets parcel_state
     *
     * @return \Foxdeli\ApiPhpSdk\Model\TimelineParcelState|null
     */
    public function getParcelState()
    {
        return $this->container['parcel_state'];
    }

    /**
     * Sets parcel_state
     *
     * @param \Foxdeli\ApiPhpSdk\Model\TimelineParcelState|null $parcel_state parcel_state
     *
     * @return self
     */
    public function setParcelState($parcel_state) : self
    {
        $this->container['parcel_state'] = $parcel_state;

        return $this;
    }

    /**
     * Gets parcel_state_group
     *
     * @return string|null
     */
    public function getParcelStateGroup()
    {
        return $this->container['parcel_state_group'];
    }

    /**
     * Sets parcel_state_group
     *
     * @param string|null $parcel_state_group optional group identifier computed from parcel state to determine if two parcel states represent same logical parcel state
     *
     * @return self
     */
    public function setParcelStateGroup($parcel_state_group) : self
    {
        $this->container['parcel_state_group'] = $parcel_state_group;

        return $this;
    }

    /**
     * Gets parcel_trace
     *
     * @return \Foxdeli\ApiPhpSdk\Model\TimelineParcelTrace|null
     * @deprecated
     */
    public function getParcelTrace()
    {
        return $this->container['parcel_trace'];
    }

    /**
     * Sets parcel_trace
     *
     * @param \Foxdeli\ApiPhpSdk\Model\TimelineParcelTrace|null $parcel_trace parcel_trace
     *
     * @return self
     * @deprecated
     */
    public function setParcelTrace($parcel_trace) : self
    {
        $this->container['parcel_trace'] = $parcel_trace;

        return $this;
    }

    /**
     * Gets issue_tracking
     *
     * @return \Foxdeli\ApiPhpSdk\Model\TimelineIssueTracking|null
     */
    public function getIssueTracking()
    {
        return $this->container['issue_tracking'];
    }

    /**
     * Sets issue_tracking
     *
     * @param \Foxdeli\ApiPhpSdk\Model\TimelineIssueTracking|null $issue_tracking issue_tracking
     *
     * @return self
     */
    public function setIssueTracking($issue_tracking) : self
    {
        $this->container['issue_tracking'] = $issue_tracking;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        $string = json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
        if($string){
            return $string;
        }
        return "";
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string|false
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



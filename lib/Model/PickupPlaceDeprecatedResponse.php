<?php
/**
 * PickupPlaceDeprecatedResponse
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Foxdeli\ApiPhpSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Foxdeli Pickup Place Service API
 *
 * Foxdeli API documentation
 *
 * The version of the OpenAPI document: 3.4.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Foxdeli\ApiPhpSdk\Model;

use \ArrayAccess;
use \Foxdeli\ApiPhpSdk\ObjectSerializer;

/**
 * PickupPlaceDeprecatedResponse Class Doc Comment
 *
 * @category Class
 * @package  Foxdeli\ApiPhpSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PickupPlaceDeprecatedResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PickupPlaceDeprecatedResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'carrier_pickup_place_id' => 'string',
        'place' => 'string',
        'street' => 'string',
        'city' => 'string',
        'zip' => 'string',
        'country' => '\Foxdeli\ApiPhpSdk\Model\CountryCode',
        'gps' => '\Foxdeli\ApiPhpSdk\Model\Gps',
        'business_hours' => '\Foxdeli\ApiPhpSdk\Model\BusinessHours',
        'type' => '\Foxdeli\ApiPhpSdk\Model\DestinationType',
        'carrier' => '\Foxdeli\ApiPhpSdk\Model\Carrier',
        'phone' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'uuid',
        'carrier_pickup_place_id' => null,
        'place' => null,
        'street' => null,
        'city' => null,
        'zip' => null,
        'country' => null,
        'gps' => null,
        'business_hours' => null,
        'type' => null,
        'carrier' => null,
        'phone' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static $openAPINullables = [
        'id' => false,
        'carrier_pickup_place_id' => false,
        'place' => false,
        'street' => false,
        'city' => false,
        'zip' => false,
        'country' => false,
        'gps' => false,
        'business_hours' => false,
        'type' => false,
        'carrier' => false,
        'phone' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var string[]
      */
    protected $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return string[]
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return string[]
     * @phpstan-return array<string, string|null>
     * @psalm-return array<string, string|null>
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return boolean[]
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return string[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'carrier_pickup_place_id' => 'carrierPickupPlaceId',
        'place' => 'place',
        'street' => 'street',
        'city' => 'city',
        'zip' => 'zip',
        'country' => 'country',
        'gps' => 'gps',
        'business_hours' => 'businessHours',
        'type' => 'type',
        'carrier' => 'carrier',
        'phone' => 'phone'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'carrier_pickup_place_id' => 'setCarrierPickupPlaceId',
        'place' => 'setPlace',
        'street' => 'setStreet',
        'city' => 'setCity',
        'zip' => 'setZip',
        'country' => 'setCountry',
        'gps' => 'setGps',
        'business_hours' => 'setBusinessHours',
        'type' => 'setType',
        'carrier' => 'setCarrier',
        'phone' => 'setPhone'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'carrier_pickup_place_id' => 'getCarrierPickupPlaceId',
        'place' => 'getPlace',
        'street' => 'getStreet',
        'city' => 'getCity',
        'zip' => 'getZip',
        'country' => 'getCountry',
        'gps' => 'getGps',
        'business_hours' => 'getBusinessHours',
        'type' => 'getType',
        'carrier' => 'getCarrier',
        'phone' => 'getPhone'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return string[]
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return string[]
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return string[]
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = [])
    {
        $this->setIfExists('id', $data, null);
        $this->setIfExists('carrier_pickup_place_id', $data, null);
        $this->setIfExists('place', $data, null);
        $this->setIfExists('street', $data, null);
        $this->setIfExists('city', $data, null);
        $this->setIfExists('zip', $data, null);
        $this->setIfExists('country', $data, null);
        $this->setIfExists('gps', $data, null);
        $this->setIfExists('business_hours', $data, null);
        $this->setIfExists('type', $data, null);
        $this->setIfExists('carrier', $data, null);
        $this->setIfExists('phone', $data, null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param mixed[]  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets carrier_pickup_place_id
     *
     * @return string|null
     */
    public function getCarrierPickupPlaceId()
    {
        return $this->container['carrier_pickup_place_id'];
    }

    /**
     * Sets carrier_pickup_place_id
     *
     * @param string|null $carrier_pickup_place_id carrier_pickup_place_id
     *
     * @return self
     */
    public function setCarrierPickupPlaceId($carrier_pickup_place_id)
    {
        if (is_null($carrier_pickup_place_id)) {
            throw new \InvalidArgumentException('non-nullable carrier_pickup_place_id cannot be null');
        }
        $this->container['carrier_pickup_place_id'] = $carrier_pickup_place_id;

        return $this;
    }

    /**
     * Gets place
     *
     * @return string|null
     */
    public function getPlace()
    {
        return $this->container['place'];
    }

    /**
     * Sets place
     *
     * @param string|null $place place
     *
     * @return self
     */
    public function setPlace($place)
    {
        if (is_null($place)) {
            throw new \InvalidArgumentException('non-nullable place cannot be null');
        }
        $this->container['place'] = $place;

        return $this;
    }

    /**
     * Gets street
     *
     * @return string|null
     */
    public function getStreet()
    {
        return $this->container['street'];
    }

    /**
     * Sets street
     *
     * @param string|null $street street
     *
     * @return self
     */
    public function setStreet($street)
    {
        if (is_null($street)) {
            throw new \InvalidArgumentException('non-nullable street cannot be null');
        }
        $this->container['street'] = $street;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string|null
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string|null $city city
     *
     * @return self
     */
    public function setCity($city)
    {
        if (is_null($city)) {
            throw new \InvalidArgumentException('non-nullable city cannot be null');
        }
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets zip
     *
     * @return string|null
     */
    public function getZip()
    {
        return $this->container['zip'];
    }

    /**
     * Sets zip
     *
     * @param string|null $zip zip
     *
     * @return self
     */
    public function setZip($zip)
    {
        if (is_null($zip)) {
            throw new \InvalidArgumentException('non-nullable zip cannot be null');
        }
        $this->container['zip'] = $zip;

        return $this;
    }

    /**
     * Gets country
     *
     * @return \Foxdeli\ApiPhpSdk\Model\CountryCode|null
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string|int|\Foxdeli\ApiPhpSdk\Model\CountryCode|null $country country
     *
     * @return self
     */
    public function setCountry($country)
    {
        if (is_null($country)) {
            throw new \InvalidArgumentException('non-nullable country cannot be null');
        }
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets gps
     *
     * @return \Foxdeli\ApiPhpSdk\Model\Gps|null
     */
    public function getGps()
    {
        return $this->container['gps'];
    }

    /**
     * Sets gps
     *
     * @param \Foxdeli\ApiPhpSdk\Model\Gps|null $gps gps
     *
     * @return self
     */
    public function setGps($gps)
    {
        if (is_null($gps)) {
            throw new \InvalidArgumentException('non-nullable gps cannot be null');
        }
        $this->container['gps'] = $gps;

        return $this;
    }

    /**
     * Gets business_hours
     *
     * @return \Foxdeli\ApiPhpSdk\Model\BusinessHours|null
     */
    public function getBusinessHours()
    {
        return $this->container['business_hours'];
    }

    /**
     * Sets business_hours
     *
     * @param \Foxdeli\ApiPhpSdk\Model\BusinessHours|null $business_hours business_hours
     *
     * @return self
     */
    public function setBusinessHours($business_hours)
    {
        if (is_null($business_hours)) {
            throw new \InvalidArgumentException('non-nullable business_hours cannot be null');
        }
        $this->container['business_hours'] = $business_hours;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \Foxdeli\ApiPhpSdk\Model\DestinationType|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|int|\Foxdeli\ApiPhpSdk\Model\DestinationType|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets carrier
     *
     * @return \Foxdeli\ApiPhpSdk\Model\Carrier|null
     */
    public function getCarrier()
    {
        return $this->container['carrier'];
    }

    /**
     * Sets carrier
     *
     * @param string|int|\Foxdeli\ApiPhpSdk\Model\Carrier|null $carrier carrier
     *
     * @return self
     */
    public function setCarrier($carrier)
    {
        if (is_null($carrier)) {
            throw new \InvalidArgumentException('non-nullable carrier cannot be null');
        }
        $this->container['carrier'] = $carrier;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string|null
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string|null $phone phone
     *
     * @return self
     */
    public function setPhone($phone)
    {
        if (is_null($phone)) {
            throw new \InvalidArgumentException('non-nullable phone cannot be null');
        }
        $this->container['phone'] = $phone;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param mixed $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param mixed $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param mixed $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param mixed $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        $string = json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
        if($string) {
            return $string;
        }
        return "";
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string|false
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



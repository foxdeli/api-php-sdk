<?php
/**
 * TimelineShippingEmail
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  Foxdeli\ApiPhpSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Foxdeli Tracking service API
 *
 * Foxdeli API implements JWT tokens as its chosen method of authentication, requiring that these tokens be included in the HTTP header X-API-Key for each request.
 *
 * The version of the OpenAPI document: 14.68.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Foxdeli\ApiPhpSdk\Model;

use \ArrayAccess;
use \Foxdeli\ApiPhpSdk\ObjectSerializer;

/**
 * TimelineShippingEmail Class Doc Comment
 *
 * @category Class
 * @description details about email communication related to timeline records of type COMMUNICATION
 * @package  Foxdeli\ApiPhpSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class TimelineShippingEmail implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TimelineShippingEmail';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'recipient' => 'string',
        'email_id' => 'string',
        'email_config_id' => 'string',
        'campaign_id' => 'string',
        'state' => '\Foxdeli\ApiPhpSdk\Model\WorkflowState',
        'event' => '\Foxdeli\ApiPhpSdk\Model\EmailEventType',
        'occurred' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'recipient' => null,
        'email_id' => 'uuid',
        'email_config_id' => 'uuid',
        'campaign_id' => 'uuid',
        'state' => null,
        'event' => null,
        'occurred' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return string[]
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return string[]
     * @phpstan-return array<string, string|null>
     * @psalm-return array<string, string|null>
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'recipient' => 'recipient',
        'email_id' => 'emailId',
        'email_config_id' => 'emailConfigId',
        'campaign_id' => 'campaignId',
        'state' => 'state',
        'event' => 'event',
        'occurred' => 'occurred'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'recipient' => 'setRecipient',
        'email_id' => 'setEmailId',
        'email_config_id' => 'setEmailConfigId',
        'campaign_id' => 'setCampaignId',
        'state' => 'setState',
        'event' => 'setEvent',
        'occurred' => 'setOccurred'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'recipient' => 'getRecipient',
        'email_id' => 'getEmailId',
        'email_config_id' => 'getEmailConfigId',
        'campaign_id' => 'getCampaignId',
        'state' => 'getState',
        'event' => 'getEvent',
        'occurred' => 'getOccurred'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return string[]
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return string[]
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return string[]
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['recipient'] = $data['recipient'] ?? null;
        $this->container['email_id'] = $data['email_id'] ?? null;
        $this->container['email_config_id'] = $data['email_config_id'] ?? null;
        $this->container['campaign_id'] = $data['campaign_id'] ?? null;
        $this->container['state'] = $data['state'] ?? null;
        $this->container['event'] = $data['event'] ?? null;
        $this->container['occurred'] = $data['occurred'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets recipient
     *
     * @return string|null
     */
    public function getRecipient()
    {
        return $this->container['recipient'];
    }

    /**
     * Sets recipient
     *
     * @param string|null $recipient recipient
     *
     * @return self
     */
    public function setRecipient($recipient) : self
    {
        $this->container['recipient'] = $recipient;

        return $this;
    }

    /**
     * Gets email_id
     *
     * @return string|null
     */
    public function getEmailId()
    {
        return $this->container['email_id'];
    }

    /**
     * Sets email_id
     *
     * @param string|null $email_id email_id
     *
     * @return self
     */
    public function setEmailId($email_id) : self
    {
        $this->container['email_id'] = $email_id;

        return $this;
    }

    /**
     * Gets email_config_id
     *
     * @return string|null
     */
    public function getEmailConfigId()
    {
        return $this->container['email_config_id'];
    }

    /**
     * Sets email_config_id
     *
     * @param string|null $email_config_id email_config_id
     *
     * @return self
     */
    public function setEmailConfigId($email_config_id) : self
    {
        $this->container['email_config_id'] = $email_config_id;

        return $this;
    }

    /**
     * Gets campaign_id
     *
     * @return string|null
     */
    public function getCampaignId()
    {
        return $this->container['campaign_id'];
    }

    /**
     * Sets campaign_id
     *
     * @param string|null $campaign_id campaign_id
     *
     * @return self
     */
    public function setCampaignId($campaign_id) : self
    {
        $this->container['campaign_id'] = $campaign_id;

        return $this;
    }

    /**
     * Gets state
     *
     * @return \Foxdeli\ApiPhpSdk\Model\WorkflowState|null
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string|int|\Foxdeli\ApiPhpSdk\Model\WorkflowState|null $state state
     *
     * @return self
     */
    public function setState($state) : self
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets event
     *
     * @return \Foxdeli\ApiPhpSdk\Model\EmailEventType|null
     */
    public function getEvent()
    {
        return $this->container['event'];
    }

    /**
     * Sets event
     *
     * @param string|int|\Foxdeli\ApiPhpSdk\Model\EmailEventType|null $event event
     *
     * @return self
     */
    public function setEvent($event) : self
    {
        $this->container['event'] = $event;

        return $this;
    }

    /**
     * Gets occurred
     *
     * @return \DateTime|null
     */
    public function getOccurred()
    {
        return $this->container['occurred'];
    }

    /**
     * Sets occurred
     *
     * @param \DateTime|null $occurred occurred
     *
     * @return self
     */
    public function setOccurred($occurred) : self
    {
        $this->container['occurred'] = $occurred;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        $string = json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
        if($string){
            return $string;
        }
        return "";
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string|false
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



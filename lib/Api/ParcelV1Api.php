<?php
/**
 * ParcelV1Api
 * PHP version 7.4
 *
 * @category Class
 * @package  Foxdeli\ApiPhpSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Foxdeli Tracking service API
 *
 * Foxdeli API implements JWT tokens as its chosen method of authentication, requiring that these tokens be included in the HTTP header X-API-Key for each request.
 *
 * The version of the OpenAPI document: 14.108.1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Foxdeli\ApiPhpSdk\Api;

use Foxdeli\ApiPhpSdk\ApiException;
use Foxdeli\ApiPhpSdk\Configuration;
use Foxdeli\ApiPhpSdk\HeaderSelector;
use Foxdeli\ApiPhpSdk\ObjectSerializer;
use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;

/**
 * ParcelV1Api Class Doc Comment
 *
 * @category Class
 * @package  Foxdeli\ApiPhpSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ParcelV1Api
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'createParcel' => [
            'application/json',
        ],
        'deleteParcel' => [
            'application/json',
        ],
        'findParcelById' => [
            'application/json',
        ],
        'updateParcel' => [
            'application/json',
        ],
        'updateParcelState' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createParcel
     *
     * Create parcel
     *
     * @param  string $order_id id of order this parcel belongs to (required)
     * @param  \Foxdeli\ApiPhpSdk\Model\ParcelRegistration $parcel_registration Parcel data to create. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createParcel'] to see the possible values for this operation
     *
     * @throws \Foxdeli\ApiPhpSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return mixed[]|int|object|null|\Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\Parcel|\Foxdeli\ApiPhpSdk\Model\ProblemDetail
     */
    public function createParcel($order_id, $parcel_registration, string $contentType = self::contentTypes['createParcel'][0])
    {
        list($response) = $this->createParcelWithHttpInfo($order_id, $parcel_registration, $contentType);
        return $response;
    }

    /**
     * Operation createParcelWithHttpInfo
     *
     * Create parcel
     *
     * @param  string $order_id id of order this parcel belongs to (required)
     * @param  \Foxdeli\ApiPhpSdk\Model\ParcelRegistration $parcel_registration Parcel data to create. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createParcel'] to see the possible values for this operation
     *
     * @throws \Foxdeli\ApiPhpSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array<mixed[]|int|object|null|\Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\Parcel|\Foxdeli\ApiPhpSdk\Model\ProblemDetail> array of \Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\Parcel|\Foxdeli\ApiPhpSdk\Model\ProblemDetail, HTTP status code, HTTP response headers (array of strings)
     */
    public function createParcelWithHttpInfo($order_id, $parcel_registration, string $contentType = self::contentTypes['createParcel'][0])
    {
        $request = $this->createParcelRequest($order_id, $parcel_registration, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 400:
                    if ('\Foxdeli\ApiPhpSdk\Model\ProblemDetail' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Foxdeli\ApiPhpSdk\Model\ProblemDetail' !== 'string') {
                            try {
                                if (defined('JSON_THROW_ON_ERROR')) {
                                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                                } else {
                                    $decodedContent = json_decode($content, false, 512);
                                    if (!$decodedContent) {
                                        throw new \JsonException();
                                    }
                                    $content = $decodedContent;
                                }
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Foxdeli\ApiPhpSdk\Model\ProblemDetail', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Foxdeli\ApiPhpSdk\Model\ProblemDetail' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Foxdeli\ApiPhpSdk\Model\ProblemDetail' !== 'string') {
                            try {
                                if (defined('JSON_THROW_ON_ERROR')) {
                                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                                } else {
                                    $decodedContent = json_decode($content, false, 512);
                                    if (!$decodedContent) {
                                        throw new \JsonException();
                                    }
                                    $content = $decodedContent;
                                }
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Foxdeli\ApiPhpSdk\Model\ProblemDetail', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Foxdeli\ApiPhpSdk\Model\ProblemDetail' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Foxdeli\ApiPhpSdk\Model\ProblemDetail' !== 'string') {
                            try {
                                if (defined('JSON_THROW_ON_ERROR')) {
                                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                                } else {
                                    $decodedContent = json_decode($content, false, 512);
                                    if (!$decodedContent) {
                                        throw new \JsonException();
                                    }
                                    $content = $decodedContent;
                                }
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Foxdeli\ApiPhpSdk\Model\ProblemDetail', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\Foxdeli\ApiPhpSdk\Model\ProblemDetail' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Foxdeli\ApiPhpSdk\Model\ProblemDetail' !== 'string') {
                            try {
                                if (defined('JSON_THROW_ON_ERROR')) {
                                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                                } else {
                                    $decodedContent = json_decode($content, false, 512);
                                    if (!$decodedContent) {
                                        throw new \JsonException();
                                    }
                                    $content = $decodedContent;
                                }
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Foxdeli\ApiPhpSdk\Model\ProblemDetail', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 201:
                    if ('\Foxdeli\ApiPhpSdk\Model\Parcel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Foxdeli\ApiPhpSdk\Model\Parcel' !== 'string') {
                            try {
                                if (defined('JSON_THROW_ON_ERROR')) {
                                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                                } else {
                                    $decodedContent = json_decode($content, false, 512);
                                    if (!$decodedContent) {
                                        throw new \JsonException();
                                    }
                                    $content = $decodedContent;
                                }
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Foxdeli\ApiPhpSdk\Model\Parcel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Foxdeli\ApiPhpSdk\Model\ProblemDetail' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Foxdeli\ApiPhpSdk\Model\ProblemDetail' !== 'string') {
                            try {
                                if (defined('JSON_THROW_ON_ERROR')) {
                                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                                } else {
                                    $decodedContent = json_decode($content, false, 512);
                                    if (!$decodedContent) {
                                        throw new \JsonException();
                                    }
                                    $content = $decodedContent;
                                }
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Foxdeli\ApiPhpSdk\Model\ProblemDetail', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Foxdeli\ApiPhpSdk\Model\Parcel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        if (defined('JSON_THROW_ON_ERROR')) {
                            $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                        } else {
                            $decodedContent = json_decode($content, false, 512);
                            if (!$decodedContent) {
                                throw new \JsonException();
                            }
                            $content = $decodedContent;
                        }
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Foxdeli\ApiPhpSdk\Model\ProblemDetail',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Foxdeli\ApiPhpSdk\Model\ProblemDetail',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Foxdeli\ApiPhpSdk\Model\ProblemDetail',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Foxdeli\ApiPhpSdk\Model\ProblemDetail',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Foxdeli\ApiPhpSdk\Model\Parcel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Foxdeli\ApiPhpSdk\Model\ProblemDetail',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createParcelAsync
     *
     * Create parcel
     *
     * @param  string $order_id id of order this parcel belongs to (required)
     * @param  \Foxdeli\ApiPhpSdk\Model\ParcelRegistration $parcel_registration Parcel data to create. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createParcel'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createParcelAsync($order_id, $parcel_registration, string $contentType = self::contentTypes['createParcel'][0])
    {
        return $this->createParcelAsyncWithHttpInfo($order_id, $parcel_registration, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createParcelAsyncWithHttpInfo
     *
     * Create parcel
     *
     * @param  string $order_id id of order this parcel belongs to (required)
     * @param  \Foxdeli\ApiPhpSdk\Model\ParcelRegistration $parcel_registration Parcel data to create. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createParcel'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createParcelAsyncWithHttpInfo($order_id, $parcel_registration, string $contentType = self::contentTypes['createParcel'][0])
    {
        $returnType = '\Foxdeli\ApiPhpSdk\Model\Parcel';
        $request = $this->createParcelRequest($order_id, $parcel_registration, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createParcel'
     *
     * @param  string $order_id id of order this parcel belongs to (required)
     * @param  \Foxdeli\ApiPhpSdk\Model\ParcelRegistration $parcel_registration Parcel data to create. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createParcel'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createParcelRequest($order_id, $parcel_registration, string $contentType = self::contentTypes['createParcel'][0])
    {

        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling createParcel'
            );
        }

        // verify the required parameter 'parcel_registration' is set
        if ($parcel_registration === null || (is_array($parcel_registration) && count($parcel_registration) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $parcel_registration when calling createParcel'
            );
        }


        $resourcePath = '/api/v1/order/{orderId}/parcel';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/problem+json', '*/*', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($parcel_registration)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                if (PHP_VERSION_ID < 70200) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($parcel_registration));
                } else {
                    $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($parcel_registration));
                }
            } else {
                $httpBody = $parcel_registration;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteParcel
     *
     * Delete existing parcel
     *
     * @param  string $order_id id of order this parcel belongs to (required)
     * @param  string $parcel_id id of parcel to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteParcel'] to see the possible values for this operation
     *
     * @throws \Foxdeli\ApiPhpSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteParcel($order_id, $parcel_id, string $contentType = self::contentTypes['deleteParcel'][0])
    {
        $this->deleteParcelWithHttpInfo($order_id, $parcel_id, $contentType);
    }

    /**
     * Operation deleteParcelWithHttpInfo
     *
     * Delete existing parcel
     *
     * @param  string $order_id id of order this parcel belongs to (required)
     * @param  string $parcel_id id of parcel to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteParcel'] to see the possible values for this operation
     *
     * @throws \Foxdeli\ApiPhpSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array<mixed[]|int|object|null> array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteParcelWithHttpInfo($order_id, $parcel_id, string $contentType = self::contentTypes['deleteParcel'][0])
    {
        $request = $this->deleteParcelRequest($order_id, $parcel_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Foxdeli\ApiPhpSdk\Model\ProblemDetail',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Foxdeli\ApiPhpSdk\Model\ProblemDetail',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Foxdeli\ApiPhpSdk\Model\ProblemDetail',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Foxdeli\ApiPhpSdk\Model\ProblemDetail',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Foxdeli\ApiPhpSdk\Model\ProblemDetail',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteParcelAsync
     *
     * Delete existing parcel
     *
     * @param  string $order_id id of order this parcel belongs to (required)
     * @param  string $parcel_id id of parcel to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteParcel'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteParcelAsync($order_id, $parcel_id, string $contentType = self::contentTypes['deleteParcel'][0])
    {
        return $this->deleteParcelAsyncWithHttpInfo($order_id, $parcel_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteParcelAsyncWithHttpInfo
     *
     * Delete existing parcel
     *
     * @param  string $order_id id of order this parcel belongs to (required)
     * @param  string $parcel_id id of parcel to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteParcel'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteParcelAsyncWithHttpInfo($order_id, $parcel_id, string $contentType = self::contentTypes['deleteParcel'][0])
    {
        $returnType = '';
        $request = $this->deleteParcelRequest($order_id, $parcel_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteParcel'
     *
     * @param  string $order_id id of order this parcel belongs to (required)
     * @param  string $parcel_id id of parcel to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteParcel'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteParcelRequest($order_id, $parcel_id, string $contentType = self::contentTypes['deleteParcel'][0])
    {

        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling deleteParcel'
            );
        }

        // verify the required parameter 'parcel_id' is set
        if ($parcel_id === null || (is_array($parcel_id) && count($parcel_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $parcel_id when calling deleteParcel'
            );
        }


        $resourcePath = '/api/v1/order/{orderId}/parcel/{parcelId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }
        // path params
        if ($parcel_id !== null) {
            $resourcePath = str_replace(
                '{' . 'parcelId' . '}',
                ObjectSerializer::toPathValue($parcel_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', 'application/problem+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation findParcelById
     *
     * Get existing parcel
     *
     * @param  string $order_id id of order this parcel belongs to (required)
     * @param  string $parcel_id id of parcel to find. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findParcelById'] to see the possible values for this operation
     *
     * @throws \Foxdeli\ApiPhpSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return mixed[]|int|object|null|\Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\Parcel|\Foxdeli\ApiPhpSdk\Model\ProblemDetail
     */
    public function findParcelById($order_id, $parcel_id, string $contentType = self::contentTypes['findParcelById'][0])
    {
        list($response) = $this->findParcelByIdWithHttpInfo($order_id, $parcel_id, $contentType);
        return $response;
    }

    /**
     * Operation findParcelByIdWithHttpInfo
     *
     * Get existing parcel
     *
     * @param  string $order_id id of order this parcel belongs to (required)
     * @param  string $parcel_id id of parcel to find. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findParcelById'] to see the possible values for this operation
     *
     * @throws \Foxdeli\ApiPhpSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array<mixed[]|int|object|null|\Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\Parcel|\Foxdeli\ApiPhpSdk\Model\ProblemDetail> array of \Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\Parcel|\Foxdeli\ApiPhpSdk\Model\ProblemDetail, HTTP status code, HTTP response headers (array of strings)
     */
    public function findParcelByIdWithHttpInfo($order_id, $parcel_id, string $contentType = self::contentTypes['findParcelById'][0])
    {
        $request = $this->findParcelByIdRequest($order_id, $parcel_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 400:
                    if ('\Foxdeli\ApiPhpSdk\Model\ProblemDetail' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Foxdeli\ApiPhpSdk\Model\ProblemDetail' !== 'string') {
                            try {
                                if (defined('JSON_THROW_ON_ERROR')) {
                                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                                } else {
                                    $decodedContent = json_decode($content, false, 512);
                                    if (!$decodedContent) {
                                        throw new \JsonException();
                                    }
                                    $content = $decodedContent;
                                }
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Foxdeli\ApiPhpSdk\Model\ProblemDetail', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Foxdeli\ApiPhpSdk\Model\ProblemDetail' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Foxdeli\ApiPhpSdk\Model\ProblemDetail' !== 'string') {
                            try {
                                if (defined('JSON_THROW_ON_ERROR')) {
                                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                                } else {
                                    $decodedContent = json_decode($content, false, 512);
                                    if (!$decodedContent) {
                                        throw new \JsonException();
                                    }
                                    $content = $decodedContent;
                                }
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Foxdeli\ApiPhpSdk\Model\ProblemDetail', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Foxdeli\ApiPhpSdk\Model\ProblemDetail' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Foxdeli\ApiPhpSdk\Model\ProblemDetail' !== 'string') {
                            try {
                                if (defined('JSON_THROW_ON_ERROR')) {
                                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                                } else {
                                    $decodedContent = json_decode($content, false, 512);
                                    if (!$decodedContent) {
                                        throw new \JsonException();
                                    }
                                    $content = $decodedContent;
                                }
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Foxdeli\ApiPhpSdk\Model\ProblemDetail', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\Foxdeli\ApiPhpSdk\Model\ProblemDetail' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Foxdeli\ApiPhpSdk\Model\ProblemDetail' !== 'string') {
                            try {
                                if (defined('JSON_THROW_ON_ERROR')) {
                                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                                } else {
                                    $decodedContent = json_decode($content, false, 512);
                                    if (!$decodedContent) {
                                        throw new \JsonException();
                                    }
                                    $content = $decodedContent;
                                }
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Foxdeli\ApiPhpSdk\Model\ProblemDetail', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\Foxdeli\ApiPhpSdk\Model\Parcel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Foxdeli\ApiPhpSdk\Model\Parcel' !== 'string') {
                            try {
                                if (defined('JSON_THROW_ON_ERROR')) {
                                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                                } else {
                                    $decodedContent = json_decode($content, false, 512);
                                    if (!$decodedContent) {
                                        throw new \JsonException();
                                    }
                                    $content = $decodedContent;
                                }
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Foxdeli\ApiPhpSdk\Model\Parcel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Foxdeli\ApiPhpSdk\Model\ProblemDetail' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Foxdeli\ApiPhpSdk\Model\ProblemDetail' !== 'string') {
                            try {
                                if (defined('JSON_THROW_ON_ERROR')) {
                                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                                } else {
                                    $decodedContent = json_decode($content, false, 512);
                                    if (!$decodedContent) {
                                        throw new \JsonException();
                                    }
                                    $content = $decodedContent;
                                }
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Foxdeli\ApiPhpSdk\Model\ProblemDetail', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Foxdeli\ApiPhpSdk\Model\Parcel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        if (defined('JSON_THROW_ON_ERROR')) {
                            $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                        } else {
                            $decodedContent = json_decode($content, false, 512);
                            if (!$decodedContent) {
                                throw new \JsonException();
                            }
                            $content = $decodedContent;
                        }
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Foxdeli\ApiPhpSdk\Model\ProblemDetail',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Foxdeli\ApiPhpSdk\Model\ProblemDetail',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Foxdeli\ApiPhpSdk\Model\ProblemDetail',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Foxdeli\ApiPhpSdk\Model\ProblemDetail',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Foxdeli\ApiPhpSdk\Model\Parcel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Foxdeli\ApiPhpSdk\Model\ProblemDetail',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation findParcelByIdAsync
     *
     * Get existing parcel
     *
     * @param  string $order_id id of order this parcel belongs to (required)
     * @param  string $parcel_id id of parcel to find. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findParcelById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findParcelByIdAsync($order_id, $parcel_id, string $contentType = self::contentTypes['findParcelById'][0])
    {
        return $this->findParcelByIdAsyncWithHttpInfo($order_id, $parcel_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation findParcelByIdAsyncWithHttpInfo
     *
     * Get existing parcel
     *
     * @param  string $order_id id of order this parcel belongs to (required)
     * @param  string $parcel_id id of parcel to find. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findParcelById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findParcelByIdAsyncWithHttpInfo($order_id, $parcel_id, string $contentType = self::contentTypes['findParcelById'][0])
    {
        $returnType = '\Foxdeli\ApiPhpSdk\Model\Parcel';
        $request = $this->findParcelByIdRequest($order_id, $parcel_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'findParcelById'
     *
     * @param  string $order_id id of order this parcel belongs to (required)
     * @param  string $parcel_id id of parcel to find. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findParcelById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function findParcelByIdRequest($order_id, $parcel_id, string $contentType = self::contentTypes['findParcelById'][0])
    {

        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling findParcelById'
            );
        }

        // verify the required parameter 'parcel_id' is set
        if ($parcel_id === null || (is_array($parcel_id) && count($parcel_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $parcel_id when calling findParcelById'
            );
        }


        $resourcePath = '/api/v1/order/{orderId}/parcel/{parcelId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }
        // path params
        if ($parcel_id !== null) {
            $resourcePath = str_replace(
                '{' . 'parcelId' . '}',
                ObjectSerializer::toPathValue($parcel_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', 'application/problem+json', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateParcel
     *
     * Update existing parcel
     *
     * @param  string $order_id id of order this parcel belongs to (required)
     * @param  string $parcel_id id of parcel to update. (required)
     * @param  \Foxdeli\ApiPhpSdk\Model\ParcelUpdate $parcel_update Parcel data to update. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateParcel'] to see the possible values for this operation
     *
     * @throws \Foxdeli\ApiPhpSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return mixed[]|int|object|null|\Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\Parcel|\Foxdeli\ApiPhpSdk\Model\ProblemDetail
     */
    public function updateParcel($order_id, $parcel_id, $parcel_update, string $contentType = self::contentTypes['updateParcel'][0])
    {
        list($response) = $this->updateParcelWithHttpInfo($order_id, $parcel_id, $parcel_update, $contentType);
        return $response;
    }

    /**
     * Operation updateParcelWithHttpInfo
     *
     * Update existing parcel
     *
     * @param  string $order_id id of order this parcel belongs to (required)
     * @param  string $parcel_id id of parcel to update. (required)
     * @param  \Foxdeli\ApiPhpSdk\Model\ParcelUpdate $parcel_update Parcel data to update. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateParcel'] to see the possible values for this operation
     *
     * @throws \Foxdeli\ApiPhpSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array<mixed[]|int|object|null|\Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\Parcel|\Foxdeli\ApiPhpSdk\Model\ProblemDetail> array of \Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\Parcel|\Foxdeli\ApiPhpSdk\Model\ProblemDetail, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateParcelWithHttpInfo($order_id, $parcel_id, $parcel_update, string $contentType = self::contentTypes['updateParcel'][0])
    {
        $request = $this->updateParcelRequest($order_id, $parcel_id, $parcel_update, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 400:
                    if ('\Foxdeli\ApiPhpSdk\Model\ProblemDetail' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Foxdeli\ApiPhpSdk\Model\ProblemDetail' !== 'string') {
                            try {
                                if (defined('JSON_THROW_ON_ERROR')) {
                                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                                } else {
                                    $decodedContent = json_decode($content, false, 512);
                                    if (!$decodedContent) {
                                        throw new \JsonException();
                                    }
                                    $content = $decodedContent;
                                }
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Foxdeli\ApiPhpSdk\Model\ProblemDetail', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Foxdeli\ApiPhpSdk\Model\ProblemDetail' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Foxdeli\ApiPhpSdk\Model\ProblemDetail' !== 'string') {
                            try {
                                if (defined('JSON_THROW_ON_ERROR')) {
                                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                                } else {
                                    $decodedContent = json_decode($content, false, 512);
                                    if (!$decodedContent) {
                                        throw new \JsonException();
                                    }
                                    $content = $decodedContent;
                                }
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Foxdeli\ApiPhpSdk\Model\ProblemDetail', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Foxdeli\ApiPhpSdk\Model\ProblemDetail' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Foxdeli\ApiPhpSdk\Model\ProblemDetail' !== 'string') {
                            try {
                                if (defined('JSON_THROW_ON_ERROR')) {
                                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                                } else {
                                    $decodedContent = json_decode($content, false, 512);
                                    if (!$decodedContent) {
                                        throw new \JsonException();
                                    }
                                    $content = $decodedContent;
                                }
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Foxdeli\ApiPhpSdk\Model\ProblemDetail', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\Foxdeli\ApiPhpSdk\Model\ProblemDetail' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Foxdeli\ApiPhpSdk\Model\ProblemDetail' !== 'string') {
                            try {
                                if (defined('JSON_THROW_ON_ERROR')) {
                                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                                } else {
                                    $decodedContent = json_decode($content, false, 512);
                                    if (!$decodedContent) {
                                        throw new \JsonException();
                                    }
                                    $content = $decodedContent;
                                }
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Foxdeli\ApiPhpSdk\Model\ProblemDetail', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\Foxdeli\ApiPhpSdk\Model\Parcel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Foxdeli\ApiPhpSdk\Model\Parcel' !== 'string') {
                            try {
                                if (defined('JSON_THROW_ON_ERROR')) {
                                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                                } else {
                                    $decodedContent = json_decode($content, false, 512);
                                    if (!$decodedContent) {
                                        throw new \JsonException();
                                    }
                                    $content = $decodedContent;
                                }
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Foxdeli\ApiPhpSdk\Model\Parcel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Foxdeli\ApiPhpSdk\Model\ProblemDetail' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Foxdeli\ApiPhpSdk\Model\ProblemDetail' !== 'string') {
                            try {
                                if (defined('JSON_THROW_ON_ERROR')) {
                                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                                } else {
                                    $decodedContent = json_decode($content, false, 512);
                                    if (!$decodedContent) {
                                        throw new \JsonException();
                                    }
                                    $content = $decodedContent;
                                }
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Foxdeli\ApiPhpSdk\Model\ProblemDetail', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Foxdeli\ApiPhpSdk\Model\Parcel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        if (defined('JSON_THROW_ON_ERROR')) {
                            $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                        } else {
                            $decodedContent = json_decode($content, false, 512);
                            if (!$decodedContent) {
                                throw new \JsonException();
                            }
                            $content = $decodedContent;
                        }
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Foxdeli\ApiPhpSdk\Model\ProblemDetail',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Foxdeli\ApiPhpSdk\Model\ProblemDetail',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Foxdeli\ApiPhpSdk\Model\ProblemDetail',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Foxdeli\ApiPhpSdk\Model\ProblemDetail',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Foxdeli\ApiPhpSdk\Model\Parcel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Foxdeli\ApiPhpSdk\Model\ProblemDetail',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateParcelAsync
     *
     * Update existing parcel
     *
     * @param  string $order_id id of order this parcel belongs to (required)
     * @param  string $parcel_id id of parcel to update. (required)
     * @param  \Foxdeli\ApiPhpSdk\Model\ParcelUpdate $parcel_update Parcel data to update. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateParcel'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateParcelAsync($order_id, $parcel_id, $parcel_update, string $contentType = self::contentTypes['updateParcel'][0])
    {
        return $this->updateParcelAsyncWithHttpInfo($order_id, $parcel_id, $parcel_update, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateParcelAsyncWithHttpInfo
     *
     * Update existing parcel
     *
     * @param  string $order_id id of order this parcel belongs to (required)
     * @param  string $parcel_id id of parcel to update. (required)
     * @param  \Foxdeli\ApiPhpSdk\Model\ParcelUpdate $parcel_update Parcel data to update. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateParcel'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateParcelAsyncWithHttpInfo($order_id, $parcel_id, $parcel_update, string $contentType = self::contentTypes['updateParcel'][0])
    {
        $returnType = '\Foxdeli\ApiPhpSdk\Model\Parcel';
        $request = $this->updateParcelRequest($order_id, $parcel_id, $parcel_update, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateParcel'
     *
     * @param  string $order_id id of order this parcel belongs to (required)
     * @param  string $parcel_id id of parcel to update. (required)
     * @param  \Foxdeli\ApiPhpSdk\Model\ParcelUpdate $parcel_update Parcel data to update. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateParcel'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateParcelRequest($order_id, $parcel_id, $parcel_update, string $contentType = self::contentTypes['updateParcel'][0])
    {

        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling updateParcel'
            );
        }

        // verify the required parameter 'parcel_id' is set
        if ($parcel_id === null || (is_array($parcel_id) && count($parcel_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $parcel_id when calling updateParcel'
            );
        }

        // verify the required parameter 'parcel_update' is set
        if ($parcel_update === null || (is_array($parcel_update) && count($parcel_update) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $parcel_update when calling updateParcel'
            );
        }


        $resourcePath = '/api/v1/order/{orderId}/parcel/{parcelId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }
        // path params
        if ($parcel_id !== null) {
            $resourcePath = str_replace(
                '{' . 'parcelId' . '}',
                ObjectSerializer::toPathValue($parcel_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/problem+json', '*/*', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($parcel_update)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                if (PHP_VERSION_ID < 70200) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($parcel_update));
                } else {
                    $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($parcel_update));
                }
            } else {
                $httpBody = $parcel_update;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateParcelState
     *
     * Update state of existing parcel
     *
     * @param  string $order_id id of order this parcel belongs to (required)
     * @param  string $parcel_id id of parcel to update. (required)
     * @param  \Foxdeli\ApiPhpSdk\Model\ParcelStateUpdate $parcel_state_update Parcel data to update. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateParcelState'] to see the possible values for this operation
     *
     * @throws \Foxdeli\ApiPhpSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return mixed[]|int|object|null|\Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\Parcel|\Foxdeli\ApiPhpSdk\Model\ProblemDetail
     */
    public function updateParcelState($order_id, $parcel_id, $parcel_state_update, string $contentType = self::contentTypes['updateParcelState'][0])
    {
        list($response) = $this->updateParcelStateWithHttpInfo($order_id, $parcel_id, $parcel_state_update, $contentType);
        return $response;
    }

    /**
     * Operation updateParcelStateWithHttpInfo
     *
     * Update state of existing parcel
     *
     * @param  string $order_id id of order this parcel belongs to (required)
     * @param  string $parcel_id id of parcel to update. (required)
     * @param  \Foxdeli\ApiPhpSdk\Model\ParcelStateUpdate $parcel_state_update Parcel data to update. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateParcelState'] to see the possible values for this operation
     *
     * @throws \Foxdeli\ApiPhpSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array<mixed[]|int|object|null|\Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\Parcel|\Foxdeli\ApiPhpSdk\Model\ProblemDetail> array of \Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\Parcel|\Foxdeli\ApiPhpSdk\Model\ProblemDetail, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateParcelStateWithHttpInfo($order_id, $parcel_id, $parcel_state_update, string $contentType = self::contentTypes['updateParcelState'][0])
    {
        $request = $this->updateParcelStateRequest($order_id, $parcel_id, $parcel_state_update, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 400:
                    if ('\Foxdeli\ApiPhpSdk\Model\ProblemDetail' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Foxdeli\ApiPhpSdk\Model\ProblemDetail' !== 'string') {
                            try {
                                if (defined('JSON_THROW_ON_ERROR')) {
                                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                                } else {
                                    $decodedContent = json_decode($content, false, 512);
                                    if (!$decodedContent) {
                                        throw new \JsonException();
                                    }
                                    $content = $decodedContent;
                                }
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Foxdeli\ApiPhpSdk\Model\ProblemDetail', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Foxdeli\ApiPhpSdk\Model\ProblemDetail' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Foxdeli\ApiPhpSdk\Model\ProblemDetail' !== 'string') {
                            try {
                                if (defined('JSON_THROW_ON_ERROR')) {
                                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                                } else {
                                    $decodedContent = json_decode($content, false, 512);
                                    if (!$decodedContent) {
                                        throw new \JsonException();
                                    }
                                    $content = $decodedContent;
                                }
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Foxdeli\ApiPhpSdk\Model\ProblemDetail', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Foxdeli\ApiPhpSdk\Model\ProblemDetail' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Foxdeli\ApiPhpSdk\Model\ProblemDetail' !== 'string') {
                            try {
                                if (defined('JSON_THROW_ON_ERROR')) {
                                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                                } else {
                                    $decodedContent = json_decode($content, false, 512);
                                    if (!$decodedContent) {
                                        throw new \JsonException();
                                    }
                                    $content = $decodedContent;
                                }
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Foxdeli\ApiPhpSdk\Model\ProblemDetail', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\Foxdeli\ApiPhpSdk\Model\ProblemDetail' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Foxdeli\ApiPhpSdk\Model\ProblemDetail' !== 'string') {
                            try {
                                if (defined('JSON_THROW_ON_ERROR')) {
                                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                                } else {
                                    $decodedContent = json_decode($content, false, 512);
                                    if (!$decodedContent) {
                                        throw new \JsonException();
                                    }
                                    $content = $decodedContent;
                                }
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Foxdeli\ApiPhpSdk\Model\ProblemDetail', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\Foxdeli\ApiPhpSdk\Model\Parcel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Foxdeli\ApiPhpSdk\Model\Parcel' !== 'string') {
                            try {
                                if (defined('JSON_THROW_ON_ERROR')) {
                                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                                } else {
                                    $decodedContent = json_decode($content, false, 512);
                                    if (!$decodedContent) {
                                        throw new \JsonException();
                                    }
                                    $content = $decodedContent;
                                }
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Foxdeli\ApiPhpSdk\Model\Parcel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Foxdeli\ApiPhpSdk\Model\ProblemDetail' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Foxdeli\ApiPhpSdk\Model\ProblemDetail' !== 'string') {
                            try {
                                if (defined('JSON_THROW_ON_ERROR')) {
                                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                                } else {
                                    $decodedContent = json_decode($content, false, 512);
                                    if (!$decodedContent) {
                                        throw new \JsonException();
                                    }
                                    $content = $decodedContent;
                                }
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Foxdeli\ApiPhpSdk\Model\ProblemDetail', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Foxdeli\ApiPhpSdk\Model\Parcel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        if (defined('JSON_THROW_ON_ERROR')) {
                            $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                        } else {
                            $decodedContent = json_decode($content, false, 512);
                            if (!$decodedContent) {
                                throw new \JsonException();
                            }
                            $content = $decodedContent;
                        }
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Foxdeli\ApiPhpSdk\Model\ProblemDetail',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Foxdeli\ApiPhpSdk\Model\ProblemDetail',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Foxdeli\ApiPhpSdk\Model\ProblemDetail',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Foxdeli\ApiPhpSdk\Model\ProblemDetail',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Foxdeli\ApiPhpSdk\Model\Parcel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Foxdeli\ApiPhpSdk\Model\ProblemDetail',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateParcelStateAsync
     *
     * Update state of existing parcel
     *
     * @param  string $order_id id of order this parcel belongs to (required)
     * @param  string $parcel_id id of parcel to update. (required)
     * @param  \Foxdeli\ApiPhpSdk\Model\ParcelStateUpdate $parcel_state_update Parcel data to update. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateParcelState'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateParcelStateAsync($order_id, $parcel_id, $parcel_state_update, string $contentType = self::contentTypes['updateParcelState'][0])
    {
        return $this->updateParcelStateAsyncWithHttpInfo($order_id, $parcel_id, $parcel_state_update, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateParcelStateAsyncWithHttpInfo
     *
     * Update state of existing parcel
     *
     * @param  string $order_id id of order this parcel belongs to (required)
     * @param  string $parcel_id id of parcel to update. (required)
     * @param  \Foxdeli\ApiPhpSdk\Model\ParcelStateUpdate $parcel_state_update Parcel data to update. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateParcelState'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateParcelStateAsyncWithHttpInfo($order_id, $parcel_id, $parcel_state_update, string $contentType = self::contentTypes['updateParcelState'][0])
    {
        $returnType = '\Foxdeli\ApiPhpSdk\Model\Parcel';
        $request = $this->updateParcelStateRequest($order_id, $parcel_id, $parcel_state_update, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateParcelState'
     *
     * @param  string $order_id id of order this parcel belongs to (required)
     * @param  string $parcel_id id of parcel to update. (required)
     * @param  \Foxdeli\ApiPhpSdk\Model\ParcelStateUpdate $parcel_state_update Parcel data to update. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateParcelState'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateParcelStateRequest($order_id, $parcel_id, $parcel_state_update, string $contentType = self::contentTypes['updateParcelState'][0])
    {

        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling updateParcelState'
            );
        }

        // verify the required parameter 'parcel_id' is set
        if ($parcel_id === null || (is_array($parcel_id) && count($parcel_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $parcel_id when calling updateParcelState'
            );
        }

        // verify the required parameter 'parcel_state_update' is set
        if ($parcel_state_update === null || (is_array($parcel_state_update) && count($parcel_state_update) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $parcel_state_update when calling updateParcelState'
            );
        }


        $resourcePath = '/api/v1/order/{orderId}/parcel/{parcelId}/state';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }
        // path params
        if ($parcel_id !== null) {
            $resourcePath = str_replace(
                '{' . 'parcelId' . '}',
                ObjectSerializer::toPathValue($parcel_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/problem+json', '*/*', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($parcel_state_update)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                if (PHP_VERSION_ID < 70200) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($parcel_state_update));
                } else {
                    $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($parcel_state_update));
                }
            } else {
                $httpBody = $parcel_state_update;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return mixed[] of http client options
     * @phpstan-return array<string, mixed>
     * @psalm-return array<string, mixed>
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}

<?php
/**
 * PickupPlaceApi
 * PHP version 7.3
 *
 * @category Class
 * @package  Foxdeli\ApiPhpSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Foxdeli Pickup Place Service API
 *
 * Foxdeli API documentation
 *
 * The version of the OpenAPI document: 3.1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Foxdeli\ApiPhpSdk\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Foxdeli\ApiPhpSdk\ApiException;
use Foxdeli\ApiPhpSdk\Configuration;
use Foxdeli\ApiPhpSdk\HeaderSelector;
use Foxdeli\ApiPhpSdk\ObjectSerializer;

/**
 * PickupPlaceApi Class Doc Comment
 *
 * @category Class
 * @package  Foxdeli\ApiPhpSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class PickupPlaceApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createPickupPlace
     *
     * Create new pickup place
     *
     * @param  \Foxdeli\ApiPhpSdk\Model\PickupPlaceCreate $pickup_place_create pickup_place_create (required)
     *
     * @throws \Foxdeli\ApiPhpSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return mixed[]|int|object|null|\Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\PickupPlaceResponse
     */
    public function createPickupPlace($pickup_place_create)
    {
        list($response) = $this->createPickupPlaceWithHttpInfo($pickup_place_create);
        return $response;
    }

    /**
     * Operation createPickupPlaceWithHttpInfo
     *
     * Create new pickup place
     *
     * @param  \Foxdeli\ApiPhpSdk\Model\PickupPlaceCreate $pickup_place_create (required)
     *
     * @throws \Foxdeli\ApiPhpSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array<int, mixed[]|int|object|null|\Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\PickupPlaceResponse> of \Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\PickupPlaceResponse, HTTP status code, HTTP response headers (array of strings)
     * return array of \Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\PickupPlaceResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createPickupPlaceWithHttpInfo($pickup_place_create)
    {
        $request = $this->createPickupPlaceRequest($pickup_place_create);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 400:
                    if ('\Foxdeli\ApiPhpSdk\Model\ProblemDetail' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Foxdeli\ApiPhpSdk\Model\ProblemDetail', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Foxdeli\ApiPhpSdk\Model\ProblemDetail' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Foxdeli\ApiPhpSdk\Model\ProblemDetail', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Foxdeli\ApiPhpSdk\Model\ProblemDetail' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Foxdeli\ApiPhpSdk\Model\ProblemDetail', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\Foxdeli\ApiPhpSdk\Model\ProblemDetail' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Foxdeli\ApiPhpSdk\Model\ProblemDetail', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 201:
                    if ('\Foxdeli\ApiPhpSdk\Model\PickupPlaceResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Foxdeli\ApiPhpSdk\Model\PickupPlaceResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Foxdeli\ApiPhpSdk\Model\PickupPlaceResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Foxdeli\ApiPhpSdk\Model\ProblemDetail',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Foxdeli\ApiPhpSdk\Model\ProblemDetail',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Foxdeli\ApiPhpSdk\Model\ProblemDetail',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Foxdeli\ApiPhpSdk\Model\ProblemDetail',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Foxdeli\ApiPhpSdk\Model\PickupPlaceResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createPickupPlaceAsync
     *
     * Create new pickup place
     *
     * @param  \Foxdeli\ApiPhpSdk\Model\PickupPlaceCreate $pickup_place_create (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createPickupPlaceAsync($pickup_place_create)
    {
        return $this->createPickupPlaceAsyncWithHttpInfo($pickup_place_create)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createPickupPlaceAsyncWithHttpInfo
     *
     * Create new pickup place
     *
     * @param  \Foxdeli\ApiPhpSdk\Model\PickupPlaceCreate $pickup_place_create (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createPickupPlaceAsyncWithHttpInfo($pickup_place_create)
    {
        $returnType = '\Foxdeli\ApiPhpSdk\Model\PickupPlaceResponse';
        $request = $this->createPickupPlaceRequest($pickup_place_create);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createPickupPlace'
     *
     * @param  \Foxdeli\ApiPhpSdk\Model\PickupPlaceCreate $pickup_place_create (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createPickupPlaceRequest($pickup_place_create)
    {
        // verify the required parameter 'pickup_place_create' is set
        if ($pickup_place_create === null || (is_array($pickup_place_create) && count($pickup_place_create) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pickup_place_create when calling createPickupPlace'
            );
        }

        $resourcePath = '/api/v1/pickup-place';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;






        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/problem+json', '*/*', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/problem+json', '*/*', 'application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($pickup_place_create)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($pickup_place_create));
            } else {
                $httpBody = $pickup_place_create;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deletePickupPlace
     *
     * Delete a pickup place
     *
     * @param  string $id UUID of the pickup place (required)
     *
     * @throws \Foxdeli\ApiPhpSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deletePickupPlace($id)
    {
        $this->deletePickupPlaceWithHttpInfo($id);
    }

    /**
     * Operation deletePickupPlaceWithHttpInfo
     *
     * Delete a pickup place
     *
     * @param  string $id UUID of the pickup place (required)
     *
     * @throws \Foxdeli\ApiPhpSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array<int, mixed[]|int|object|null> of null, HTTP status code, HTTP response headers (array of strings)
     * return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deletePickupPlaceWithHttpInfo($id)
    {
        $request = $this->deletePickupPlaceRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Foxdeli\ApiPhpSdk\Model\ProblemDetail',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Foxdeli\ApiPhpSdk\Model\ProblemDetail',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Foxdeli\ApiPhpSdk\Model\ProblemDetail',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Foxdeli\ApiPhpSdk\Model\ProblemDetail',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Foxdeli\ApiPhpSdk\Model\ProblemDetail',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deletePickupPlaceAsync
     *
     * Delete a pickup place
     *
     * @param  string $id UUID of the pickup place (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deletePickupPlaceAsync($id)
    {
        return $this->deletePickupPlaceAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deletePickupPlaceAsyncWithHttpInfo
     *
     * Delete a pickup place
     *
     * @param  string $id UUID of the pickup place (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deletePickupPlaceAsyncWithHttpInfo($id)
    {
        
        $request = $this->deletePickupPlaceRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response)  {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deletePickupPlace'
     *
     * @param  string $id UUID of the pickup place (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deletePickupPlaceRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deletePickupPlace'
            );
        }

        $resourcePath = '/api/v1/pickup-place/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/problem+json', '*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/problem+json', '*/*'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation filterPickupPlaces
     *
     * Filter pickup places
     *
     * @param  \Foxdeli\ApiPhpSdk\Model\PickupPlaceFilter $pickup_place_filter pickup_place_filter (required)
     * @param  int $page Zero-based page index (0..N) (optional, default to 0)
     * @param  int $size The size of the page to be returned (optional, default to 20)
     * @param  string[] $sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)
     *
     * @throws \Foxdeli\ApiPhpSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return mixed[]|int|object|null|\Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\CollectionResponsePickupPlaceResponse
     */
    public function filterPickupPlaces($pickup_place_filter, $page = 0, $size = 20, $sort = null)
    {
        list($response) = $this->filterPickupPlacesWithHttpInfo($pickup_place_filter, $page, $size, $sort);
        return $response;
    }

    /**
     * Operation filterPickupPlacesWithHttpInfo
     *
     * Filter pickup places
     *
     * @param  \Foxdeli\ApiPhpSdk\Model\PickupPlaceFilter $pickup_place_filter (required)
     * @param  int $page Zero-based page index (0..N) (optional, default to 0)
     * @param  int $size The size of the page to be returned (optional, default to 20)
     * @param  string[] $sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)
     *
     * @throws \Foxdeli\ApiPhpSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array<int, mixed[]|int|object|null|\Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\CollectionResponsePickupPlaceResponse> of \Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\CollectionResponsePickupPlaceResponse, HTTP status code, HTTP response headers (array of strings)
     * return array of \Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\CollectionResponsePickupPlaceResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function filterPickupPlacesWithHttpInfo($pickup_place_filter, $page = 0, $size = 20, $sort = null)
    {
        $request = $this->filterPickupPlacesRequest($pickup_place_filter, $page, $size, $sort);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 400:
                    if ('\Foxdeli\ApiPhpSdk\Model\ProblemDetail' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Foxdeli\ApiPhpSdk\Model\ProblemDetail', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Foxdeli\ApiPhpSdk\Model\ProblemDetail' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Foxdeli\ApiPhpSdk\Model\ProblemDetail', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Foxdeli\ApiPhpSdk\Model\ProblemDetail' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Foxdeli\ApiPhpSdk\Model\ProblemDetail', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\Foxdeli\ApiPhpSdk\Model\ProblemDetail' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Foxdeli\ApiPhpSdk\Model\ProblemDetail', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\Foxdeli\ApiPhpSdk\Model\CollectionResponsePickupPlaceResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Foxdeli\ApiPhpSdk\Model\CollectionResponsePickupPlaceResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Foxdeli\ApiPhpSdk\Model\CollectionResponsePickupPlaceResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Foxdeli\ApiPhpSdk\Model\ProblemDetail',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Foxdeli\ApiPhpSdk\Model\ProblemDetail',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Foxdeli\ApiPhpSdk\Model\ProblemDetail',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Foxdeli\ApiPhpSdk\Model\ProblemDetail',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Foxdeli\ApiPhpSdk\Model\CollectionResponsePickupPlaceResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation filterPickupPlacesAsync
     *
     * Filter pickup places
     *
     * @param  \Foxdeli\ApiPhpSdk\Model\PickupPlaceFilter $pickup_place_filter (required)
     * @param  int $page Zero-based page index (0..N) (optional, default to 0)
     * @param  int $size The size of the page to be returned (optional, default to 20)
     * @param  string[] $sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function filterPickupPlacesAsync($pickup_place_filter, $page = 0, $size = 20, $sort = null)
    {
        return $this->filterPickupPlacesAsyncWithHttpInfo($pickup_place_filter, $page, $size, $sort)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation filterPickupPlacesAsyncWithHttpInfo
     *
     * Filter pickup places
     *
     * @param  \Foxdeli\ApiPhpSdk\Model\PickupPlaceFilter $pickup_place_filter (required)
     * @param  int $page Zero-based page index (0..N) (optional, default to 0)
     * @param  int $size The size of the page to be returned (optional, default to 20)
     * @param  string[] $sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function filterPickupPlacesAsyncWithHttpInfo($pickup_place_filter, $page = 0, $size = 20, $sort = null)
    {
        $returnType = '\Foxdeli\ApiPhpSdk\Model\CollectionResponsePickupPlaceResponse';
        $request = $this->filterPickupPlacesRequest($pickup_place_filter, $page, $size, $sort);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'filterPickupPlaces'
     *
     * @param  \Foxdeli\ApiPhpSdk\Model\PickupPlaceFilter $pickup_place_filter (required)
     * @param  int $page Zero-based page index (0..N) (optional, default to 0)
     * @param  int $size The size of the page to be returned (optional, default to 20)
     * @param  string[] $sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function filterPickupPlacesRequest($pickup_place_filter, $page = 0, $size = 20, $sort = null)
    {
        // verify the required parameter 'pickup_place_filter' is set
        if ($pickup_place_filter === null || (is_array($pickup_place_filter) && count($pickup_place_filter) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pickup_place_filter when calling filterPickupPlaces'
            );
        }

        $resourcePath = '/api/v1/pickup-place/filter';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // query params
        if ($page !== null) {
            if('form' === 'form' && is_array($page)) {
                foreach($page as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['page'] = $page;
            }
        }
        // query params
        if ($size !== null) {
            if('form' === 'form' && is_array($size)) {
                foreach($size as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['size'] = $size;
            }
        }
        // query params
        if ($sort !== null) {
            if('form' === 'form' && is_array($sort)) {
                foreach($sort as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['sort'] = $sort;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/problem+json', '*/*', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/problem+json', '*/*', 'application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($pickup_place_filter)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($pickup_place_filter));
            } else {
                $httpBody = $pickup_place_filter;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAllEshopPickupPlaces
     *
     * Get eshop pickup places
     *
     * @param  string $eshop_id UUID of eshop (required)
     * @param  int $page Zero-based page index (0..N) (optional, default to 0)
     * @param  int $size The size of the page to be returned (optional, default to 20)
     * @param  string[] $sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)
     *
     * @throws \Foxdeli\ApiPhpSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return mixed[]|int|object|null|\Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\CollectionResponsePickupPlaceResponse
     */
    public function getAllEshopPickupPlaces($eshop_id, $page = 0, $size = 20, $sort = null)
    {
        list($response) = $this->getAllEshopPickupPlacesWithHttpInfo($eshop_id, $page, $size, $sort);
        return $response;
    }

    /**
     * Operation getAllEshopPickupPlacesWithHttpInfo
     *
     * Get eshop pickup places
     *
     * @param  string $eshop_id UUID of eshop (required)
     * @param  int $page Zero-based page index (0..N) (optional, default to 0)
     * @param  int $size The size of the page to be returned (optional, default to 20)
     * @param  string[] $sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)
     *
     * @throws \Foxdeli\ApiPhpSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array<int, mixed[]|int|object|null|\Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\CollectionResponsePickupPlaceResponse> of \Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\CollectionResponsePickupPlaceResponse, HTTP status code, HTTP response headers (array of strings)
     * return array of \Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\CollectionResponsePickupPlaceResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAllEshopPickupPlacesWithHttpInfo($eshop_id, $page = 0, $size = 20, $sort = null)
    {
        $request = $this->getAllEshopPickupPlacesRequest($eshop_id, $page, $size, $sort);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 400:
                    if ('\Foxdeli\ApiPhpSdk\Model\ProblemDetail' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Foxdeli\ApiPhpSdk\Model\ProblemDetail', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Foxdeli\ApiPhpSdk\Model\ProblemDetail' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Foxdeli\ApiPhpSdk\Model\ProblemDetail', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Foxdeli\ApiPhpSdk\Model\ProblemDetail' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Foxdeli\ApiPhpSdk\Model\ProblemDetail', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\Foxdeli\ApiPhpSdk\Model\ProblemDetail' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Foxdeli\ApiPhpSdk\Model\ProblemDetail', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\Foxdeli\ApiPhpSdk\Model\CollectionResponsePickupPlaceResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Foxdeli\ApiPhpSdk\Model\CollectionResponsePickupPlaceResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Foxdeli\ApiPhpSdk\Model\CollectionResponsePickupPlaceResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Foxdeli\ApiPhpSdk\Model\ProblemDetail',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Foxdeli\ApiPhpSdk\Model\ProblemDetail',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Foxdeli\ApiPhpSdk\Model\ProblemDetail',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Foxdeli\ApiPhpSdk\Model\ProblemDetail',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Foxdeli\ApiPhpSdk\Model\CollectionResponsePickupPlaceResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAllEshopPickupPlacesAsync
     *
     * Get eshop pickup places
     *
     * @param  string $eshop_id UUID of eshop (required)
     * @param  int $page Zero-based page index (0..N) (optional, default to 0)
     * @param  int $size The size of the page to be returned (optional, default to 20)
     * @param  string[] $sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllEshopPickupPlacesAsync($eshop_id, $page = 0, $size = 20, $sort = null)
    {
        return $this->getAllEshopPickupPlacesAsyncWithHttpInfo($eshop_id, $page, $size, $sort)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAllEshopPickupPlacesAsyncWithHttpInfo
     *
     * Get eshop pickup places
     *
     * @param  string $eshop_id UUID of eshop (required)
     * @param  int $page Zero-based page index (0..N) (optional, default to 0)
     * @param  int $size The size of the page to be returned (optional, default to 20)
     * @param  string[] $sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllEshopPickupPlacesAsyncWithHttpInfo($eshop_id, $page = 0, $size = 20, $sort = null)
    {
        $returnType = '\Foxdeli\ApiPhpSdk\Model\CollectionResponsePickupPlaceResponse';
        $request = $this->getAllEshopPickupPlacesRequest($eshop_id, $page, $size, $sort);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAllEshopPickupPlaces'
     *
     * @param  string $eshop_id UUID of eshop (required)
     * @param  int $page Zero-based page index (0..N) (optional, default to 0)
     * @param  int $size The size of the page to be returned (optional, default to 20)
     * @param  string[] $sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAllEshopPickupPlacesRequest($eshop_id, $page = 0, $size = 20, $sort = null)
    {
        // verify the required parameter 'eshop_id' is set
        if ($eshop_id === null || (is_array($eshop_id) && count($eshop_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $eshop_id when calling getAllEshopPickupPlaces'
            );
        }

        $resourcePath = '/api/v1/pickup-place';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // query params
        if ($eshop_id !== null) {
            if('form' === 'form' && is_array($eshop_id)) {
                foreach($eshop_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['eshopId'] = $eshop_id;
            }
        }
        // query params
        if ($page !== null) {
            if('form' === 'form' && is_array($page)) {
                foreach($page as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['page'] = $page;
            }
        }
        // query params
        if ($size !== null) {
            if('form' === 'form' && is_array($size)) {
                foreach($size as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['size'] = $size;
            }
        }
        // query params
        if ($sort !== null) {
            if('form' === 'form' && is_array($sort)) {
                foreach($sort as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['sort'] = $sort;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/problem+json', '*/*', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/problem+json', '*/*', 'application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPickupPlace
     *
     * Get pickup place by id
     *
     * @param  string $id UUID of the pickup place (required)
     *
     * @throws \Foxdeli\ApiPhpSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return mixed[]|int|object|null|\Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\PickupPlaceResponse|\Foxdeli\ApiPhpSdk\Model\ProblemDetail
     */
    public function getPickupPlace($id)
    {
        list($response) = $this->getPickupPlaceWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getPickupPlaceWithHttpInfo
     *
     * Get pickup place by id
     *
     * @param  string $id UUID of the pickup place (required)
     *
     * @throws \Foxdeli\ApiPhpSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array<int, mixed[]|int|object|null|\Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\PickupPlaceResponse|\Foxdeli\ApiPhpSdk\Model\ProblemDetail> of \Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\PickupPlaceResponse|\Foxdeli\ApiPhpSdk\Model\ProblemDetail, HTTP status code, HTTP response headers (array of strings)
     * return array of \Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\PickupPlaceResponse|\Foxdeli\ApiPhpSdk\Model\ProblemDetail, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPickupPlaceWithHttpInfo($id)
    {
        $request = $this->getPickupPlaceRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 400:
                    if ('\Foxdeli\ApiPhpSdk\Model\ProblemDetail' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Foxdeli\ApiPhpSdk\Model\ProblemDetail', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Foxdeli\ApiPhpSdk\Model\ProblemDetail' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Foxdeli\ApiPhpSdk\Model\ProblemDetail', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Foxdeli\ApiPhpSdk\Model\ProblemDetail' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Foxdeli\ApiPhpSdk\Model\ProblemDetail', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\Foxdeli\ApiPhpSdk\Model\ProblemDetail' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Foxdeli\ApiPhpSdk\Model\ProblemDetail', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\Foxdeli\ApiPhpSdk\Model\PickupPlaceResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Foxdeli\ApiPhpSdk\Model\PickupPlaceResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Foxdeli\ApiPhpSdk\Model\ProblemDetail' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Foxdeli\ApiPhpSdk\Model\ProblemDetail', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Foxdeli\ApiPhpSdk\Model\PickupPlaceResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Foxdeli\ApiPhpSdk\Model\ProblemDetail',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Foxdeli\ApiPhpSdk\Model\ProblemDetail',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Foxdeli\ApiPhpSdk\Model\ProblemDetail',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Foxdeli\ApiPhpSdk\Model\ProblemDetail',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Foxdeli\ApiPhpSdk\Model\PickupPlaceResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Foxdeli\ApiPhpSdk\Model\ProblemDetail',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPickupPlaceAsync
     *
     * Get pickup place by id
     *
     * @param  string $id UUID of the pickup place (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPickupPlaceAsync($id)
    {
        return $this->getPickupPlaceAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPickupPlaceAsyncWithHttpInfo
     *
     * Get pickup place by id
     *
     * @param  string $id UUID of the pickup place (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPickupPlaceAsyncWithHttpInfo($id)
    {
        $returnType = '\Foxdeli\ApiPhpSdk\Model\PickupPlaceResponse';
        $request = $this->getPickupPlaceRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPickupPlace'
     *
     * @param  string $id UUID of the pickup place (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPickupPlaceRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getPickupPlace'
            );
        }

        $resourcePath = '/api/v1/pickup-place/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/problem+json', '*/*', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/problem+json', '*/*', 'application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updatePickupPlace
     *
     * Update a pickup place
     *
     * @param  string $id UUID of the pickup place (required)
     * @param  \Foxdeli\ApiPhpSdk\Model\PickupPlaceUpdate $pickup_place_update pickup_place_update (required)
     *
     * @throws \Foxdeli\ApiPhpSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return mixed[]|int|object|null|\Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\PickupPlaceResponse|\Foxdeli\ApiPhpSdk\Model\ProblemDetail
     */
    public function updatePickupPlace($id, $pickup_place_update)
    {
        list($response) = $this->updatePickupPlaceWithHttpInfo($id, $pickup_place_update);
        return $response;
    }

    /**
     * Operation updatePickupPlaceWithHttpInfo
     *
     * Update a pickup place
     *
     * @param  string $id UUID of the pickup place (required)
     * @param  \Foxdeli\ApiPhpSdk\Model\PickupPlaceUpdate $pickup_place_update (required)
     *
     * @throws \Foxdeli\ApiPhpSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array<int, mixed[]|int|object|null|\Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\PickupPlaceResponse|\Foxdeli\ApiPhpSdk\Model\ProblemDetail> of \Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\PickupPlaceResponse|\Foxdeli\ApiPhpSdk\Model\ProblemDetail, HTTP status code, HTTP response headers (array of strings)
     * return array of \Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\PickupPlaceResponse|\Foxdeli\ApiPhpSdk\Model\ProblemDetail, HTTP status code, HTTP response headers (array of strings)
     */
    public function updatePickupPlaceWithHttpInfo($id, $pickup_place_update)
    {
        $request = $this->updatePickupPlaceRequest($id, $pickup_place_update);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 400:
                    if ('\Foxdeli\ApiPhpSdk\Model\ProblemDetail' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Foxdeli\ApiPhpSdk\Model\ProblemDetail', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Foxdeli\ApiPhpSdk\Model\ProblemDetail' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Foxdeli\ApiPhpSdk\Model\ProblemDetail', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Foxdeli\ApiPhpSdk\Model\ProblemDetail' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Foxdeli\ApiPhpSdk\Model\ProblemDetail', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\Foxdeli\ApiPhpSdk\Model\ProblemDetail' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Foxdeli\ApiPhpSdk\Model\ProblemDetail', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\Foxdeli\ApiPhpSdk\Model\PickupPlaceResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Foxdeli\ApiPhpSdk\Model\PickupPlaceResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Foxdeli\ApiPhpSdk\Model\ProblemDetail' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Foxdeli\ApiPhpSdk\Model\ProblemDetail', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Foxdeli\ApiPhpSdk\Model\PickupPlaceResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Foxdeli\ApiPhpSdk\Model\ProblemDetail',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Foxdeli\ApiPhpSdk\Model\ProblemDetail',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Foxdeli\ApiPhpSdk\Model\ProblemDetail',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Foxdeli\ApiPhpSdk\Model\ProblemDetail',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Foxdeli\ApiPhpSdk\Model\PickupPlaceResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Foxdeli\ApiPhpSdk\Model\ProblemDetail',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updatePickupPlaceAsync
     *
     * Update a pickup place
     *
     * @param  string $id UUID of the pickup place (required)
     * @param  \Foxdeli\ApiPhpSdk\Model\PickupPlaceUpdate $pickup_place_update (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updatePickupPlaceAsync($id, $pickup_place_update)
    {
        return $this->updatePickupPlaceAsyncWithHttpInfo($id, $pickup_place_update)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updatePickupPlaceAsyncWithHttpInfo
     *
     * Update a pickup place
     *
     * @param  string $id UUID of the pickup place (required)
     * @param  \Foxdeli\ApiPhpSdk\Model\PickupPlaceUpdate $pickup_place_update (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updatePickupPlaceAsyncWithHttpInfo($id, $pickup_place_update)
    {
        $returnType = '\Foxdeli\ApiPhpSdk\Model\PickupPlaceResponse';
        $request = $this->updatePickupPlaceRequest($id, $pickup_place_update);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updatePickupPlace'
     *
     * @param  string $id UUID of the pickup place (required)
     * @param  \Foxdeli\ApiPhpSdk\Model\PickupPlaceUpdate $pickup_place_update (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updatePickupPlaceRequest($id, $pickup_place_update)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updatePickupPlace'
            );
        }
        // verify the required parameter 'pickup_place_update' is set
        if ($pickup_place_update === null || (is_array($pickup_place_update) && count($pickup_place_update) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pickup_place_update when calling updatePickupPlace'
            );
        }

        $resourcePath = '/api/v1/pickup-place/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/problem+json', '*/*', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/problem+json', '*/*', 'application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($pickup_place_update)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($pickup_place_update));
            } else {
                $httpBody = $pickup_place_update;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation uploadPickupPlaceImage
     *
     * Upload a pickup place image
     *
     * @param  string $id UUID of the pickup place (required)
     * @param  \SplFileObject $file file (required)
     *
     * @throws \Foxdeli\ApiPhpSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return mixed[]|int|object|null|\Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\FileInfo|\Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\ProblemDetail
     */
    public function uploadPickupPlaceImage($id, $file)
    {
        list($response) = $this->uploadPickupPlaceImageWithHttpInfo($id, $file);
        return $response;
    }

    /**
     * Operation uploadPickupPlaceImageWithHttpInfo
     *
     * Upload a pickup place image
     *
     * @param  string $id UUID of the pickup place (required)
     * @param  \SplFileObject $file (required)
     *
     * @throws \Foxdeli\ApiPhpSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array<int, mixed[]|int|object|null|\Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\FileInfo|\Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\ProblemDetail> of \Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\FileInfo|\Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\ProblemDetail, HTTP status code, HTTP response headers (array of strings)
     * return array of \Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\FileInfo|\Foxdeli\ApiPhpSdk\Model\ProblemDetail|\Foxdeli\ApiPhpSdk\Model\ProblemDetail, HTTP status code, HTTP response headers (array of strings)
     */
    public function uploadPickupPlaceImageWithHttpInfo($id, $file)
    {
        $request = $this->uploadPickupPlaceImageRequest($id, $file);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 400:
                    if ('\Foxdeli\ApiPhpSdk\Model\ProblemDetail' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Foxdeli\ApiPhpSdk\Model\ProblemDetail', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Foxdeli\ApiPhpSdk\Model\ProblemDetail' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Foxdeli\ApiPhpSdk\Model\ProblemDetail', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Foxdeli\ApiPhpSdk\Model\ProblemDetail' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Foxdeli\ApiPhpSdk\Model\ProblemDetail', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\Foxdeli\ApiPhpSdk\Model\ProblemDetail' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Foxdeli\ApiPhpSdk\Model\ProblemDetail', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 201:
                    if ('\Foxdeli\ApiPhpSdk\Model\FileInfo' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Foxdeli\ApiPhpSdk\Model\FileInfo', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Foxdeli\ApiPhpSdk\Model\ProblemDetail' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Foxdeli\ApiPhpSdk\Model\ProblemDetail', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 413:
                    if ('\Foxdeli\ApiPhpSdk\Model\ProblemDetail' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Foxdeli\ApiPhpSdk\Model\ProblemDetail', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Foxdeli\ApiPhpSdk\Model\FileInfo';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Foxdeli\ApiPhpSdk\Model\ProblemDetail',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Foxdeli\ApiPhpSdk\Model\ProblemDetail',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Foxdeli\ApiPhpSdk\Model\ProblemDetail',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Foxdeli\ApiPhpSdk\Model\ProblemDetail',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Foxdeli\ApiPhpSdk\Model\FileInfo',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Foxdeli\ApiPhpSdk\Model\ProblemDetail',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Foxdeli\ApiPhpSdk\Model\ProblemDetail',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation uploadPickupPlaceImageAsync
     *
     * Upload a pickup place image
     *
     * @param  string $id UUID of the pickup place (required)
     * @param  \SplFileObject $file (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function uploadPickupPlaceImageAsync($id, $file)
    {
        return $this->uploadPickupPlaceImageAsyncWithHttpInfo($id, $file)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation uploadPickupPlaceImageAsyncWithHttpInfo
     *
     * Upload a pickup place image
     *
     * @param  string $id UUID of the pickup place (required)
     * @param  \SplFileObject $file (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function uploadPickupPlaceImageAsyncWithHttpInfo($id, $file)
    {
        $returnType = '\Foxdeli\ApiPhpSdk\Model\FileInfo';
        $request = $this->uploadPickupPlaceImageRequest($id, $file);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'uploadPickupPlaceImage'
     *
     * @param  string $id UUID of the pickup place (required)
     * @param  \SplFileObject $file (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function uploadPickupPlaceImageRequest($id, $file)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling uploadPickupPlaceImage'
            );
        }
        // verify the required parameter 'file' is set
        if ($file === null || (is_array($file) && count($file) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $file when calling uploadPickupPlaceImage'
            );
        }

        $resourcePath = '/api/v1/pickup-place/{id}/image';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // form params
        if ($file !== null) {
            $multipart = true;
            $formParams['file'] = [];
            $paramFiles = is_array($file) ? $file : [$file];
            foreach ($paramFiles as $paramFile) {
                $formParams['file'][] = \GuzzleHttp\Psr7\Utils::tryFopen(
                    ObjectSerializer::toFormValue($paramFile),
                    'rb'
                );
            }
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/problem+json', '*/*', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/problem+json', '*/*', 'application/json'],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     * @phpstan-return array<string, mixed>
     * @psalm-return array<string, mixed>
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
